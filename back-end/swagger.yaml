openapi: 3.0.3

info:
  title: ESN Assembly app
  version: 1.10.0
  contact:
    name: Matteo Carbone
    email: email@matteocarbone.com
    url: https://matteocarbone.com

# servers: [url: https://api.esn-ga.link/dev]

externalDocs:
  description: Models documentation
  url: https://github.com/uatisdeproblem/esn-assembly/tree/main/back-end/src/models

tags:
  - name: Login
    description: Access the platform
  - name: Configurations
    description: The platfrom's configurations
  - name: Categories
    description: The platform's categories
  - name: Events
    description: The platform's events
  - name: Topics
    description: The platform's topics for Q&As
  - name: Questions
    description: The questions on a standard topic
  - name: Answers
    description: The answers to the questions in a standard topic
  - name: Messages
    description: The messages in a live topic
  - name: Badges
    description: The badges earned by the users following actions on the platform
  - name: UsefulLinks
    description: The useful links available to the users to explore more contents
  - name: Deadlines
    description: The deadlines the users should be aware of
  - name: Communications
    description: The communications towards the users
  - name: Statistics
    description: General statistics on the use of the app
  - name: Drafts
    description: The drafts of the users for questions and answers
  - name: Opportunities
    description: The platform's opportunities to which users can apply to
  - name: Applications
    description: The user applications to the opportunities
  - name: Voting
    description: The voting sessions

paths:
  /login:
    get:
      summary: Manage the login accepted request from ESN Accounts and prepare a token to authenticate the user
      description: Acquire the CAS ticket, validate it, create the user (if necessary) and return a token.
      tags: [Login]
      parameters:
        - name: ticket
          in: query
          description: The CAS ticket of successful login with ESN Accounts
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /configurations:
    get:
      summary: Get the platform's configurations
      tags: [Configurations]
      responses:
        200:
          $ref: '#/components/responses/Configurations'
    put:
      summary: Edit the platform's configurations
      description: Requires to be Administrator
      tags: [Configurations]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configurations'
      responses:
        200:
          $ref: '#/components/responses/Configurations'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Set specific configurations
      description: Requires to be Administrator
      tags: [Configurations]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - GET_EMAIL_TEMPLATE
                    - SET_EMAIL_TEMPLATE
                    - RESET_EMAIL_TEMPLATE
                    - TEST_EMAIL_TEMPLATE
                template:
                  type: string
                  description: (GET_EMAIL_TEMPLATE, SET_EMAIL_TEMPLATE, RESET_EMAIL_TEMPLATE, TEST_EMAIL_TEMPLATE)
                subject:
                  type: string
                  description: (SET_EMAIL_TEMPLATE)
                content:
                  type: string
                  description: (SET_EMAIL_TEMPLATE)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /media:
    post:
      summary: Get a signed URL to upload a new image
      description: Requires to be Administrator
      tags: [Configurations]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /categories:
    get:
      summary: Get the categories
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: all
          in: query
          description: Whether to include archived categories
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/Categories'
    post:
      summary: Insert a new category
      description: Requires to be Administrator
      tags: [Categories]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          $ref: '#/components/responses/Category'
        400:
          $ref: '#/components/responses/BadParameters'
  /categories/{categoryId}:
    get:
      summary: Get a category
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Category'
    put:
      summary: Edit a category
      description: Requires to be Administrator
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          $ref: '#/components/responses/Category'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a category
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [ARCHIVE, UNARCHIVE]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a category
      description: Requires to be Administrator; it works only if it's not used in any topic.
      tags: [Categories]
      security:
        - AuthFunction: []
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /events:
    get:
      summary: Get the events
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: all
          in: query
          description: Whether to include archived events
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/Events'
    post:
      summary: Insert a new event
      description: Requires to be Administrator
      tags: [Events]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          $ref: '#/components/responses/Event'
        400:
          $ref: '#/components/responses/BadParameters'
  /events/{eventId}:
    get:
      summary: Get an event
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Event'
    put:
      summary: Edit an event
      description: Requires to be Administrator
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          $ref: '#/components/responses/Event'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on an event
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [ARCHIVE, UNARCHIVE]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete an event
      description: Requires to be Administrator; it works only if it's not used in any topic.
      tags: [Events]
      security:
        - AuthFunction: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /public-attachments:
    patch:
      summary: Actions on the public attachments
      tags: [Configurations]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [GET_ATTACHMENT_UPLOAD_URL, GET_ATTACHMENT_DOWNLOAD_URL]
                attachmentId:
                  type: string
                  description: (GET_ATTACHMENT_DOWNLOAD_URL)
                filename:
                  type: string
                  description: (GET_ATTACHMENT_DOWNLOAD_URL)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics:
    get:
      summary: Get the topics
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: archived
          in: query
          description: Whether to get archived topics instead of active ones
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/Topics'
    post:
      summary: Insert a new topic
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/Topic'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on the topics
      tags: [Topics]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [INSERT_FROM_APPLICATION]
                opportunity:
                  description: (INSERT_FROM_APPLICATION)
                  $ref: '#/components/responses/Opportunity'
                application:
                  description: (INSERT_FROM_APPLICATION)
                  $ref: '#/components/responses/Application'
                category:
                  description: (INSERT_FROM_APPLICATION)
                  $ref: '#/components/responses/Category'
                event:
                  description: (INSERT_FROM_APPLICATION)
                  $ref: '#/components/responses/Event'
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}:
    get:
      summary: Get a topic
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: archived
          in: query
          description: Whether to filter based on the archivation status
          schema:
            type: boolean
        - name: categoryId
          in: query
          description: The category ID to filter
          schema:
            type: string
        - name: eventId
          in: query
          description: The event ID to filter
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Topic'
    put:
      summary: Edit a topic
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/Topic'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a topic
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a topic
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [OPEN, CLOSE, ARCHIVE, UNARCHIVE, MESSAGES_UPVOTES]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/related:
    get:
      summary: Get the related topics
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Topics'
  /topics/{topicId}/related/{relatedId}:
    post:
      summary: Link two topics together
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: relatedId
          in: path
          description: Related Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/Topic'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete the relation between two topics
      description: Requires to be Administrator
      tags: [Topics]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: relatedId
          in: path
          description: Related Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions:
    get:
      summary: Get the questions of a topic
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Questions'
    post:
      summary: Insert a new question on a topic
      description: Permissions depend on topic configuration
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        200:
          $ref: '#/components/responses/Question'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}:
    get:
      summary: Get the question on a topic
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Question'
    put:
      summary: Edit the question on a topic
      description: Requires to be Administrator or the creator
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        200:
          $ref: '#/components/responses/Question'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a question
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [USER_CLAPS]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete the question on a topic
      description: Requires to be Administrator or the creator
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}/upvotes:
    get:
      summary: Get the users who upvoted the question
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Subjects'
    post:
      summary: Upvote a question
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Cancel the upvote to a question
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}/upvotes/{userId}:
    get:
      summary: Whether the user has upvoted the question
      tags: [Questions]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /topics/{topicId}/questions/{questionId}/answers:
    get:
      summary: Get the answers to a question
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Answers'
    post:
      summary: Insert a new answer to a question
      description: Requires to be Administrator or a subject of the topic
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        200:
          $ref: '#/components/responses/Answer'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}/answers/{answerId}:
    get:
      summary: Get the answer to a question
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Answer'
    put:
      summary: Edit the answer to a question
      description: Requires to be Administrator or the creator
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        200:
          $ref: '#/components/responses/Answer'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete the answer to a question
      description: Requires to be Administrator or the creator
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}/answers/{answerId}/claps:
    get:
      summary: Get the users who clapped to an answer
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Subjects'
    post:
      summary: Clap to an answer
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Cancel the clap to a question
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/questions/{questionId}/answers/{answerId}/claps/{userId}:
    get:
      summary: Whether the user has clapped the answer
      tags: [Answers]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: questionId
          in: path
          description: Question ID
          required: true
          schema:
            type: string
        - name: answerId
          in: path
          description: Answer ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /topics/{topicId}/messages:
    get:
      summary: Get the messages of a live topic
      tags: [Messages]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Messages'
    post:
      summary: Insert a new message on a live topic
      description: Permissions depend on topic configuration
      tags: [Messages]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          $ref: '#/components/responses/Message'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/messages/{messageId}:
    patch:
      summary: Actions on a message of a live topic
      tags: [Messages]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: Message ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [MARK_COMPLETE, UNDO_COMPLETE]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete the message of a live topic
      description: Requires to be Administrator or the creator
      tags: [Messages]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: Message ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/messages-anonymous:
    post:
      summary: Insert a new message on a live topic, anonimously
      description: Only if the live topics allows it
      tags: [Messages]
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          $ref: '#/components/responses/Message'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/messages/{messageId}/upvotes:
    get:
      summary: Get the users who upvoted the message
      tags: [Messages]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: Message ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Subjects'
    post:
      summary: Upvote a message
      tags: [Messages]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: Message ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Cancel the upvote to a message
      tags: [Messages]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: Message ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /topics/{topicId}/messages/{messageId}/upvotes/{userId}:
    get:
      summary: Whether the user has upvoted the message
      tags: [Messages]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: path
          description: Topic ID
          required: true
          schema:
            type: string
        - name: messageId
          in: path
          description: Message ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /badges:
    get:
      summary: Get the badges available in the platform
      tags: [Badges]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Badges'
    post:
      summary: Add a badge
      description: Requires to be Administrator
      tags: [Badges]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        200:
          $ref: '#/components/responses/Badge'
        400:
          $ref: '#/components/responses/BadParameters'
  /badges/{badge}:
    get:
      summary: Get the detail of a badge
      tags: [Badges]
      security:
        - AuthFunction: []
      parameters:
        - name: badge
          in: path
          description: Badge
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Badge'
    put:
      summary: Edit a badge
      description: Requires to be Administrator
      tags: [Badges]
      security:
        - AuthFunction: []
      parameters:
        - name: badge
          in: path
          description: Badge
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        200:
          $ref: '#/components/responses/Badge'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a badge
      description: Requires to be Administrator
      tags: [Badges]
      security:
        - AuthFunction: []
      parameters:
        - name: badge
          in: path
          description: Badge
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /usersBadges:
    get:
      summary: Get the user's earned badges
      tags: [Badges]
      security:
        - AuthFunction: []
      parameters:
        - name: userId
          in: query
          description: Get another user's badges (only administrators)
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserBadges'
  /usersBadges/{badge}:
    get:
      summary: Get the badge earned (if so) by the user (and mark as seen)
      tags: [Badges]
      security:
        - AuthFunction: []
      parameters:
        - name: badge
          in: path
          description: Badge
          required: true
          schema:
            type: string
        - name: userId
          in: query
          description: Get another user's badges (only administrators)
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserBadge'
    post:
      summary: Add the badge to a user
      description: Requires to be Administrator
      tags: [Badges]
      security:
        - AuthFunction: []
      parameters:
        - name: badge
          in: path
          description: Badge
          required: true
          schema:
            type: string
        - name: userId
          in: query
          description: Target User ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserBadge'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Remove the badge from a user
      description: Requires to be Administrator
      tags: [Badges]
      security:
        - AuthFunction: []
      parameters:
        - name: badge
          in: path
          description: Badge
          required: true
          schema:
            type: string
        - name: userId
          in: query
          description: Target User ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /usefulLinks:
    get:
      summary: Get the useful links
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/UsefulLinks'
    post:
      summary: Insert a new useful link
      description: Requires to be Administrator
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsefulLink'
      responses:
        200:
          $ref: '#/components/responses/UsefulLink'
        400:
          $ref: '#/components/responses/BadParameters'
  /usefulLinks/{linkId}:
    get:
      summary: Get a useful link
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      parameters:
        - name: linkId
          in: path
          description: Link ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UsefulLink'
    put:
      summary: Edit a useful link
      description: Requires to be Administrator
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      parameters:
        - name: linkId
          in: path
          description: Link ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsefulLink'
      responses:
        200:
          $ref: '#/components/responses/UsefulLink'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a useful link
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      parameters:
        - name: linkId
          in: path
          description: Link ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [SWAP_SORT]
                otherLinkId:
                  type: string
                  description: (SWAP_SORT)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a useful link
      description: Requires to be Administrator
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      parameters:
        - name: linkId
          in: path
          description: Link ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /deadlines:
    get:
      summary: Get the deadlines
      tags: [Deadlines]
      security:
        - AuthFunction: []
      parameters:
        - name: year
          in: query
          description: Get the deadlines of this year; if not specified, only future deadlines are returned
          schema:
            type: number
      responses:
        200:
          $ref: '#/components/responses/Deadlines'
    post:
      summary: Insert a new deadline
      description: Requires to be Administrator
      tags: [Deadlines]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deadline'
      responses:
        200:
          $ref: '#/components/responses/Deadlines'
        400:
          $ref: '#/components/responses/BadParameters'
  /deadlines/{deadlineId}:
    get:
      summary: Get a deadline
      tags: [Deadlines]
      security:
        - AuthFunction: []
      parameters:
        - name: deadlineId
          in: path
          description: Deadline ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Deadline'
    put:
      summary: Edit a deadline
      description: Requires to be Administrator
      tags: [Deadlines]
      security:
        - AuthFunction: []
      parameters:
        - name: deadlineId
          in: path
          description: Deadline ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deadline'
      responses:
        200:
          $ref: '#/components/responses/Deadline'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a deadline
      description: Requires to be Administrator
      tags: [Deadlines]
      security:
        - AuthFunction: []
      parameters:
        - name: deadlineId
          in: path
          description: Deadline ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /communications:
    get:
      summary: Get the communications
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: year
          in: query
          description: Get the communications of this year; if not specified, only unarchived ones are returned
          schema:
            type: number
      responses:
        200:
          $ref: '#/components/responses/Communications'
    post:
      summary: Insert a new communication
      description: Requires to be Administrator
      tags: [Communications]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Communication'
      responses:
        200:
          $ref: '#/components/responses/Communications'
        400:
          $ref: '#/components/responses/BadParameters'
  /communications/{communicationId}:
    get:
      summary: Get a communication
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          description: Communication ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Communication'
    put:
      summary: Edit a communication
      description: Requires to be Administrator
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          description: Communication ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Communication'
      responses:
        200:
          $ref: '#/components/responses/Communication'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a communication
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          description: Communication ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [ARCHIVE, UNARCHIVE]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a communication
      description: Requires to be Administrator
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          description: Communication ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /statistics:
    get:
      summary: Get statistics on the use of the app
      description: Requires to be Administrator
      tags: [Statistics]
      security:
        - AuthFunction: []
      parameters:
        - name: since
          in: query
          description: The starting date interval
          required: true
          schema:
            type: string
        - name: to
          in: query
          description: The ending date interval
          required: true
          schema:
            type: string
        - name: granularity
          in: query
          description: The desired granularity for the statistic
          required: false
          schema:
            type: string
            enum: [MONTHLY, DAILY, HOURLY]
            default: MONTHLY
        - name: entityType
          in: query
          description: The type of entity to filter
          required: true
          schema:
            type: string
        - name: entityId
          in: query
          description: The ID of the specific entity's entry to filter
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Statistics'
        400:
          $ref: '#/components/responses/BadParameters'
  /drafts:
    get:
      summary: Get your drafts
      tags: [Drafts]
      security:
        - AuthFunction: []
      parameters:
        - name: topicId
          in: query
          description: Topic ID (to retrieve drafts of questions)
          schema:
            type: string
        - name: questionId
          in: query
          description: Question ID (to retrieve drafts of answers)
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Drafts'
    post:
      summary: Save a new draft
      tags: [Drafts]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Draft'
      responses:
        200:
          $ref: '#/components/responses/Draft'
        400:
          $ref: '#/components/responses/BadParameters'
  /drafts/{draftId}:
    get:
      summary: Get a draft of yours
      tags: [Drafts]
      security:
        - AuthFunction: []
      parameters:
        - name: draftId
          in: path
          description: Draft ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Draft'
    put:
      summary: Edit one of your drafts
      tags: [Drafts]
      security:
        - AuthFunction: []
      parameters:
        - name: draftId
          in: path
          description: Draft ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Draft'
      responses:
        200:
          $ref: '#/components/responses/Draft'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete one of your drafts
      tags: [Drafts]
      security:
        - AuthFunction: []
      parameters:
        - name: draftId
          in: path
          description: Draft ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /opportunities:
    get:
      summary: Get the opportunities
      tags: [Opportunities]
      security:
        - AuthFunction: []
      parameters:
        - name: archivedFromYear
          in: query
          description: Whether to get archived opportunities of a specified year, instead of active ones
          schema:
            type: number
      responses:
        200:
          $ref: '#/components/responses/Opportunities'
    post:
      summary: Insert a new opportunity
      description: Requires permissions to manage opportunities
      tags: [Opportunities]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Opportunity'
      responses:
        200:
          $ref: '#/components/responses/Opportunity'
        400:
          $ref: '#/components/responses/BadParameters'
  /opportunities/{opportunityId}:
    get:
      summary: Get an opportunity's detail
      tags: [Opportunities]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Opportunity'
    put:
      summary: Edit an opportunity
      description: Requires permissions to manage the opportunity
      tags: [Opportunities]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Opportunity'
      responses:
        200:
          $ref: '#/components/responses/Opportunity'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete an opportunity
      description: Requires permissions to manage the opportunity
      tags: [Opportunities]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on an opportunity
      description: Requires permissions to manage the opportunity
      tags: [Opportunities]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [OPEN, CLOSE, ARCHIVE, UNARCHIVE]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /opportunities/{opportunityId}/applications:
    get:
      summary: Get the applications to an opportunity
      description: Users that can manage the opportunity will see every application, whereas normal users only theirs
      tags: [Applications]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Applications'
    post:
      summary: Application of the user to an opportunity
      description: Each user can apply only once
      tags: [Applications]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        200:
          $ref: '#/components/responses/Application'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on the applications
      tags: [Applications]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [GET_ATTACHMENT_UPLOAD_URL]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /opportunities/{opportunityId}/applications/{applicationId}:
    put:
      summary: Fix the rejected application to an opportunity
      description: Requires permissions to manage the opportunity or to be the creator
      tags: [Applications]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: Application ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        200:
          $ref: '#/components/responses/Application'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on the application
      description: Permissions depend on the action
      tags: [Applications]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: Application ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [GET_ATTACHMENT_DOWNLOAD_URL, REVIEW_APPROVE, REVIEW_REJECT]
                name:
                  type: string
                  description: (GET_ATTACHMENT_DOWNLOAD_URL)
                message:
                  type: string
                  description: (REVIEW_APPROVE, REVIEW_REJECT)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Withdraw/delete the application to an opportunity
      description: Requires permissions to manage the opportunity or to be the creator
      tags: [Applications]
      security:
        - AuthFunction: []
      parameters:
        - name: opportunityId
          in: path
          description: Opportunity ID
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: Application ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /voting-sessions:
    get:
      summary: Get the voting sessions
      tags: [Voting]
      security:
        - AuthFunction: []
      parameters:
        - name: archived
          in: query
          description: Whether to get archived voting sessions instead of active ones
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/VotingSessions'
    post:
      summary: Insert a new voting session
      description: Requires to be Administrator
      tags: [Voting]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VotingSession'
      responses:
        200:
          $ref: '#/components/responses/VotingSession'
        400:
          $ref: '#/components/responses/BadParameters'
  /voting-sessions/{sessionId}:
    get:
      summary: Get a voting session
      tags: [Voting]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
        - name: archived
          in: query
          description: Whether to filter based on the archivation status
          schema:
            type: boolean
        - name: eventId
          in: query
          description: The event ID to filter
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/VotingSession'
    put:
      summary: Edit a voting session
      description: Requires to be Administrator (or Scrutineer of the session)
      tags: [Voting]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VotingSession'
      responses:
        200:
          $ref: '#/components/responses/VotingSession'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a voting session
      description: Permissions depend on the action
      tags: [Voting]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    [
                      START,
                      TICKETS_STATUS,
                      EXTEND_END,
                      STOP,
                      RESEND_VOTING_LINK,
                      GET_VOTING_TOKEN,
                      CHECK_EARLY_END,
                      GET_RESULTS,
                      PUBLISH_RESULTS,
                      SET_RESULTS,
                      ARCHIVE,
                      UNARCHIVE
                    ]
                endsAt:
                  type: string
                  description: (START, EXTEND_END)
                timezone:
                  type: string
                  description: (START, EXTEND_END)
                voterId:
                  type: string
                  description: (RESEND_VOTING_LINK, GET_VOTING_TOKEN)
                email:
                  type: string
                  description: (RESEND_VOTING_LINK)
                results:
                  type: object
                  description: (SET_RESULTS)
                participantVoters:
                  type: string
                  description: (SET_RESULTS)
                publish:
                  type: boolean
                  description: (SET_RESULTS)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a voting session
      description: Requires to be Administrator (or Scrutineer of the session)
      tags: [Voting]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /voting-sessions/{sessionId}/vote:
    get:
      summary: Login to a voting session and begin to vote
      description: The combination of voting ID and token authenticates the request
      tags: [Voting]
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
        - name: voterId
          in: query
          description: The ID of the voter
          schema:
            type: boolean
        - name: token
          in: query
          description: The token for voting
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/VotingSession'
        400:
          $ref: '#/components/responses/BadParameters'
    post:
      summary: Submit a vote
      description: The combination of voting ID and token authenticates the request
      tags: [Voting]
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                votingTicket:
                  $ref: '#/components/schemas/VotingTicket'
                submission:
                  type: array
                  items:
                    type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'

components:
  schemas:
    Configurations:
      type: object
      additionalProperties: {}
    Category:
      type: object
      additionalProperties: {}
    Event:
      type: object
      additionalProperties: {}
    Topic:
      type: object
      additionalProperties: {}
    Question:
      type: object
      additionalProperties: {}
    Answer:
      type: object
      additionalProperties: {}
    Message:
      type: object
      additionalProperties: {}
    Badge:
      type: object
      additionalProperties: {}
    UserBadge:
      type: object
      additionalProperties: {}
    UsefulLink:
      type: object
      additionalProperties: {}
    Deadline:
      type: object
      additionalProperties: {}
    Communication:
      type: object
      additionalProperties: {}
    Subject:
      type: object
      additionalProperties: {}
    Statistic:
      type: object
      additionalProperties: {}
    Draft:
      type: object
      additionalProperties: {}
    Opportunity:
      type: object
      additionalProperties: {}
    Application:
      type: object
      additionalProperties: {}
    VotingSession:
      type: object
      additionalProperties: {}
    VotingTicket:
      type: object
      additionalProperties: {}

  responses:
    Configurations:
      description: The platform' configurations
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Configurations'
    Category:
      description: A category
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Category'
    Categories:
      description: The categories
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Category'
    Event:
      description: An event
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Event'
    Events:
      description: The events
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Event'
    Topic:
      description: A topic
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Topic'
    Topics:
      description: The topics
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Topic'
    Question:
      description: A question
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Question'
    Questions:
      description: The questions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Question'
    Answer:
      description: An answer
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Answer'
    Answers:
      description: The answers
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Answer'
    Message:
      description: A message
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Message'
    Messages:
      description: The messages
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Message'
    Badge:
      description: A badge
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Badge'
    Badges:
      description: The badges
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Badge'
    UserBadge:
      description: A badge earned by a user
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/UserBadge'
    UserBadges:
      description: The badges earned by a user
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserBadge'
    UsefulLink:
      description: A useful link
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/UsefulLink'
    UsefulLinks:
      description: The useful links
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UsefulLink'
    Deadline:
      description: A deadline
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Deadline'
    Deadlines:
      description: The deadlines
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Deadline'
    Communication:
      description: A communication
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Communication'
    Communications:
      description: The communications
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Communication'
    Subject:
      description: A subject
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Subject'
    Subjects:
      description: The subjects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Subject'
    Statistic:
      description: A statistic entry
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Statistic'
    Statistics:
      description: Some statistics
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Statistic'
    Draft:
      description: A draft for a question or answer
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Draft'
    Drafts:
      description: The drafts of a user
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Draft'
    Opportunity:
      description: An opportunity
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Opportunity'
    Opportunities:
      description: The opportunities
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Opportunity'
    Application:
      description: An application to an opportunity
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Application'
    Applications:
      description: The applications to an opportunity
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Application'
    VotingSession:
      description: A voting session
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/VotingSession'
    VotingSessions:
      description: The voting sessions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VotingSession'
    VotingTicket:
      description: A ticket to vote in a session
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/VotingTicket'
    VotingTickets:
      description: The tickets for voting in a sessions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VotingTicket'
    BadParameters:
      description: Bad input parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The request isn't valid
    OperationCompleted:
      description: Operation completed

  securitySchemes:
    AuthFunction:
      type: apiKey
      name: Authorization
      in: header
